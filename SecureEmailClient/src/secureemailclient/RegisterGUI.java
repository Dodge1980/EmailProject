/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package secureemailclient;

import java.io.IOException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import javax.crypto.*;
import java.security.*;
import java.security.spec.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
import static secureemailclient.LoginGUI.*;
import static secureemailclient.ClientGUI.*;

/**
 *
 * @author Will
 */
public class RegisterGUI extends javax.swing.JFrame {

    public String PUBLIC_KEY_FILE;
    public String PRIVATE_KEY_FILE;
    /**
     * Creates new form RegisterGUI
     */
    public RegisterGUI() {
        initComponents();
        Border border = BorderFactory.createCompoundBorder(usernameField.getBorder(), BorderFactory.createEmptyBorder(1, 2, 1, 1));
        usernameField.setBorder(border);
        passwordField1.setBorder(border);
        passwordField2.setBorder(border);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        registerButton = new javax.swing.JButton();
        passwordField1 = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        passwordField2 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel2.setText("Account Name");

        usernameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usernameFieldMouseClicked(evt);
            }
        });
        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                usernameFieldKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel3.setText("Password");

        registerButton.setText("Register");
        registerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerButtonActionPerformed(evt);
            }
        });

        passwordField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordField1KeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel4.setText("Confirm Password");

        passwordField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordField2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registerButton)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(usernameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addComponent(passwordField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                            .addComponent(passwordField2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(passwordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registerButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usernameFieldMouseClicked

    }//GEN-LAST:event_usernameFieldMouseClicked

    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed
        String username = usernameField.getText();
        char[] password = passwordField1.getPassword();
        boolean accepted = true;
        if(password.length < 6){
            JOptionPane.showMessageDialog(this, "Password too short. Passwords must be at least 6 characters in length");
            accepted = false;
        }
        else if(password.length > 128){
            JOptionPane.showMessageDialog(this, "Password too long. Passwords must be at most 127 characters in length");
            accepted = false;
        }
        else if(username.length() < 4){
            JOptionPane.showMessageDialog(this, "Username too short. Usernames must be at least 4 characters in length");
            accepted = false;
        }
        else if(username.length() > 20){
            JOptionPane.showMessageDialog(this, "Username too long. Usernames must be at most 20 characters in length");
            accepted = false;
        }
        else if (!Arrays.equals(password, passwordField2.getPassword())){
            JOptionPane.showMessageDialog(this, "Passwords do not match, please reenter passwords.");
            accepted = false;
        }
        if (accepted){
            byte[] encryptedPassword = null;
            try {
                encryptedPassword = encryptString(Arrays.toString(password), getServerPubKey());
            } catch (NoSuchPaddingException | BadPaddingException | NoSuchAlgorithmException | InvalidKeyException | InvalidKeySpecException | IllegalBlockSizeException ex) {
                System.err.println("Error encrypting password: "+ex);
            }
            String publicKeyString = "";
            try {
                ClientGUI.username = username;
                KeyPair kp = genKeyPair();
                saveKeyPair(kp);
                publicKeyString = bytesToHex(kp.getPublic().getEncoded());
            } catch (NoSuchAlgorithmException | IOException ex) {
                System.err.println("Error creating and saving key: " + ex);
            }
            String backFromServer = sendAndReceive("NEWU" + bytesToHex(encryptedPassword) +"."+ publicKeyString +"."+ username);
            if (backFromServer.equals("ACCEPT")){
                JOptionPane.showMessageDialog(this, "Thank you for registering, please log in.");
                this.setVisible(false);
            }else{
                JOptionPane.showMessageDialog(this, "Error adding user. Username may already exist.");
            }
        }
    }//GEN-LAST:event_registerButtonActionPerformed

    private void passwordField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordField2KeyPressed
        if(evt.getKeyCode() == 10){
            registerButtonActionPerformed(null);
        }
    }//GEN-LAST:event_passwordField2KeyPressed

    private void passwordField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordField1KeyPressed
        if(evt.getKeyCode() == 10){
            registerButtonActionPerformed(null);
        }
    }//GEN-LAST:event_passwordField1KeyPressed

    private void usernameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyPressed
        if(evt.getKeyCode() == 10){
            registerButtonActionPerformed(null);
        }
    }//GEN-LAST:event_usernameFieldKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField1;
    private javax.swing.JPasswordField passwordField2;
    private javax.swing.JButton registerButton;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    public PublicKey getServerPubKey() throws InvalidKeySpecException, NoSuchAlgorithmException{
        String pubKeyText = sendAndReceive("PUBK");
        byte[] keyBytes = hexToBytes(pubKeyText);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyBytes);
        PublicKey pubKey = keyFactory.generatePublic(publicKeySpec);
        return pubKey;
    }
    
    public byte[] encryptString(String inputString, PublicKey pubKey) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
        // specify mode and padding instead of relying on defaults (use OAEP if available!)
        Cipher encrypt=Cipher.getInstance("RSA/ECB/PKCS1Padding");
        // init with the *public key*!
        encrypt.init(Cipher.ENCRYPT_MODE, pubKey);
        // encrypt with known character encoding, you should probably use hybrid cryptography instead 
        byte[] encryptedMessage = encrypt.doFinal(inputString.getBytes(StandardCharsets.UTF_8));
        return encryptedMessage;
    }
}