/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package secureemailclient;

import java.awt.Component;
import java.io.*;
import java.math.BigInteger;
import java.net.Socket;
import java.net.URL;
import java.security.*;
import java.security.spec.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import static secureemailclient.LoginGUI.sendAndReceive;
import sun.security.rsa.RSAPublicKeyImpl;

/**
 *
 * @author Will
 */
public class ClientGUI extends javax.swing.JFrame {
    private Socket clientSocket;
    
    public static String username;
    public static String ip;
    
    private Message currentMessage;
    
    public ArrayList<Message> messages = new ArrayList<Message>();
    
    /**
     * Creates new form ClientGUI
     */
    public ClientGUI(Socket socket, String username, String ip) {
        clientSocket = socket;
        
//        URL pubUrl = getClass().getResource("keys/public");
//        URL privUrl = getClass().getResource("keys/private");
//        PUBLIC_KEY_FILE = pubUrl.getPath();
//        PRIVATE_KEY_FILE = privUrl.getPath();
        
        ClientGUI.username = username;
        ClientGUI.ip = ip;
        
        initComponents();
        URL url = IPSelect.class.getResource("/images/iconPadlock.png");
        ImageIcon icon = new ImageIcon(url);
        setIconImage(icon.getImage());
        
        DefaultListModel listModel = new DefaultListModel();
        jList1.setModel(listModel);
        ListCellRenderer listCellRenderer = new ListCellRenderer() {
            protected Border noFocusBorder = new EmptyBorder(5, 5, 5, 0);
            protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                renderer.setBorder(noFocusBorder);
                return renderer;
            }
        };
        jList1.setCellRenderer(listCellRenderer);
        jList1.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int i = jList1.getSelectedIndex();
                if (i >= 0){
                    currentMessage = messages.get(i);
                    fromText.setText(currentMessage.getSender());
                    subjectText.setText(currentMessage.getSubject());
                    contentsText.setText(currentMessage.getContents());
                    contentsText.setCaretPosition(0);
                }
          }
        });
        contentsText.setLineWrap(true);
        contentsText.setWrapStyleWord(true);
        
        Border border = BorderFactory.createCompoundBorder(fromText.getBorder(), BorderFactory.createEmptyBorder(1, 3, 1, 1));
        fromText.setBorder(border);
        subjectText.setBorder(border);
        contentsText.setBorder(border);
        
        this.setVisible(true);
        
        getMessageButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newMessageButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        fromText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        subjectText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentsText = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        getMessageButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuAccount = new javax.swing.JMenu();
        jMenuAccountItemLogout = new javax.swing.JMenuItem();
        jMenuAccountItemNewKey = new javax.swing.JMenuItem();
        jMenuMessage = new javax.swing.JMenu();
        jMenuEditItemDelete = new javax.swing.JMenuItem();
        jMenuEditItemVerify = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SecureMail");

        newMessageButton.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        newMessageButton.setText("New Message");
        newMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMessageButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel1.setText("From:");

        fromText.setEditable(false);
        fromText.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        fromText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(130, 130, 130)));
        fromText.setMargin(new java.awt.Insets(2, 5, 2, 2));

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel3.setText("Subject:");

        subjectText.setEditable(false);
        subjectText.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        subjectText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(130, 130, 130)));
        subjectText.setMargin(new java.awt.Insets(2, 5, 2, 2));

        jLabel4.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        jLabel4.setText("Message:");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(130, 130, 130)));

        contentsText.setEditable(false);
        contentsText.setColumns(20);
        contentsText.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        contentsText.setRows(5);
        contentsText.setBorder(null);
        contentsText.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jScrollPane1.setViewportView(contentsText);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(130, 130, 130)));

        jList1.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a lLonger Subject</html>", "<html>Sender:  Will<br/>Subject: Hello</html>", "<html>Sender:  James<br/>Subject: This is a Longer Subject</html>" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setToolTipText("");
        jList1.setSelectionBackground(new java.awt.Color(204, 204, 204));
        jList1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(jList1);

        getMessageButton.setFont(new java.awt.Font("Microsoft YaHei", 0, 12)); // NOI18N
        getMessageButton.setText("Refresh");
        getMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getMessageButtonActionPerformed(evt);
            }
        });

        jMenuAccount.setText("Account");

        jMenuAccountItemLogout.setText("Logout");
        jMenuAccountItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAccountItemLogoutActionPerformed(evt);
            }
        });
        jMenuAccount.add(jMenuAccountItemLogout);

        jMenuAccountItemNewKey.setText("New Key");
        jMenuAccountItemNewKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAccountItemNewKeyActionPerformed(evt);
            }
        });
        jMenuAccount.add(jMenuAccountItemNewKey);

        jMenuBar1.add(jMenuAccount);

        jMenuMessage.setText("Message");

        jMenuEditItemDelete.setText("Delete");
        jMenuMessage.add(jMenuEditItemDelete);

        jMenuEditItemVerify.setText("Verify");
        jMenuEditItemVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuEditItemVerifyActionPerformed(evt);
            }
        });
        jMenuMessage.add(jMenuEditItemVerify);

        jMenuBar1.add(jMenuMessage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(getMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subjectText)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addComponent(fromText))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(getMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMessageButtonActionPerformed
        SenderGUI senderGUI = new SenderGUI(clientSocket, username);
        senderGUI.setVisible(true);
    }//GEN-LAST:event_newMessageButtonActionPerformed

    private void getMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getMessageButtonActionPerformed
        askForMessages();
        updateMessages();
        
        jList1.setSelectedIndex(0); //Already have the first message item selected
    }//GEN-LAST:event_getMessageButtonActionPerformed

    private void jMenuAccountItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAccountItemLogoutActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMenuAccountItemLogoutActionPerformed

    private void jMenuEditItemVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuEditItemVerifyActionPerformed
        verifyMessage(currentMessage);
    }//GEN-LAST:event_jMenuEditItemVerifyActionPerformed

    private void jMenuAccountItemNewKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAccountItemNewKeyActionPerformed
        newKey();
        JOptionPane.showMessageDialog(this, "New keypair generated.", "New Keypair", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuAccountItemNewKeyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea contentsText;
    private javax.swing.JTextField fromText;
    private javax.swing.JButton getMessageButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenuAccount;
    private javax.swing.JMenuItem jMenuAccountItemLogout;
    private javax.swing.JMenuItem jMenuAccountItemNewKey;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuEditItemDelete;
    private javax.swing.JMenuItem jMenuEditItemVerify;
    private javax.swing.JMenu jMenuMessage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton newMessageButton;
    private javax.swing.JTextField subjectText;
    // End of variables declaration//GEN-END:variables
    
    public static KeyPair genKeyPair() throws NoSuchAlgorithmException{
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048);
        KeyPair generatedKeyPair = keyGen.genKeyPair();
        return generatedKeyPair;
    }
    
    public void printKeyPair(KeyPair keyPair) {
        printPublicKey(keyPair);
        printPrivateKey(keyPair);
    }
    
    public void printPublicKey(KeyPair keyPair){
        PublicKey pub = keyPair.getPublic();
        System.out.println("Public Key: " + bytesToHex(pub.getEncoded()));
    }
    
    public void printPrivateKey(KeyPair keyPair){
        PrivateKey priv = keyPair.getPrivate();
        System.out.println("Private Key: " + bytesToHex(priv.getEncoded()));
    }
    
    public static String messageToHex(Message message) throws IOException{
        String hexString = "";
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(message);
        byte[] buf = baos.toByteArray();
        hexString = bytesToHex(buf);
        return hexString;
    }
    
    public static Message hexToMessage(String hexString) throws IOException, ClassNotFoundException{
        ObjectInputStream ois =
        new ObjectInputStream(new ByteArrayInputStream(hexToBytes(hexString)));
        Message message = (Message) ois.readObject();
        ois.close();
        return message;
    }

    public static String bytesToHex(byte[] b) {
        String result = "";
        for (int i = 0; i < b.length; i++) {
            result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
        }
        return result;
    }
    
    public static byte[] hexToBytes(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    public static void saveKeyPair(KeyPair keyPair) throws IOException {
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey publicKey = keyPair.getPublic();
        
        String path = "userData/"+username+"/keys";
        
        File keysDir = new File(path);
        
        if(!keysDir.exists()){
            keysDir.mkdirs();
            System.out.println("Creating directory at: "+keysDir);
        }
        
        String pubKeyFile = path+"/public";
        String privKeyFile = path+"/private";

        // Store Public Key.
        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
                        publicKey.getEncoded());
        FileOutputStream fos = new FileOutputStream(pubKeyFile);
        fos.write(x509EncodedKeySpec.getEncoded());
        fos.close();

        // Store Private Key.
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
                        privateKey.getEncoded());
        fos = new FileOutputStream(privKeyFile);
        fos.write(pkcs8EncodedKeySpec.getEncoded());
        fos.close();
    }

    public static KeyPair loadKeyPair(String path) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        
            File keysDir = new File(path);

            if(!keysDir.exists()){
                throw new IOException("Could not find file");
            }

            String pubKeyFile = path+"/public";
            String privKeyFile = path+"/private";
            
            // Read Public Key.
            File filePublicKey = new File(pubKeyFile);
            FileInputStream fis = new FileInputStream(pubKeyFile);
            byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
            fis.read(encodedPublicKey);
            fis.close();

            // Read Private Key.
            File filePrivateKey = new File(privKeyFile);
            fis = new FileInputStream(privKeyFile);
            byte[] encodedPrivateKey = new byte[(int) filePrivateKey.length()];
            fis.read(encodedPrivateKey);
            fis.close();

            // Generate KeyPair.
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
                            encodedPublicKey);
            PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);

            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(
                            encodedPrivateKey);
            PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

            return new KeyPair(publicKey, privateKey);
    }
    
    public boolean newKey(){
        try {
            KeyPair kp = genKeyPair();
            saveKeyPair(kp);
            sendAndReceive("NKEY"+bytesToHex(kp.getPublic().getEncoded()));
            return true;
        } catch (IOException | NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    public void askForMessages(){
        String received = sendAndReceive("ANYM");
        if(received.equals("ALLVER")){
            getMessages(true);
        }
        else if(received.equals("NOTVER")){
            int reply;
            do{
                reply = JOptionPane.showConfirmDialog(
                this,
                "There are unverified messages addressed to you, would you like to receive them?",
                "Unverified Messages",
                JOptionPane.YES_NO_OPTION);
            } while(reply == JOptionPane.CLOSED_OPTION); //Stops the windows close button working.
            if (reply == JOptionPane.YES_OPTION) {
                getMessages(false);
            }
            else{
                getMessages(true);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "No new messages.", "No Messages", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    public void verifyMessage(Message m){
        String hexKey = sendAndReceive("GETK"+m.getSender());
        try {
            PublicKey pKey = m.hexToPublicKey(hexKey);
            RSAPublicKeyImpl pk = (RSAPublicKeyImpl) pKey;
            BigInteger modulus = pk.getModulus();
            BigInteger exponent = pk.getPublicExponent();
            
            String modulusLines = bigIntegerToLines(modulus);
            
            JOptionPane.showMessageDialog(this, "Sender's public key:\nModulus: "+modulusLines+"\nExponent: "+exponent, "Public Key", JOptionPane.INFORMATION_MESSAGE);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            System.err.println("Error verifying message: " + e);
            JOptionPane.showMessageDialog(this, "Could not verify message,\nSender's key is invalid.", "Unverified Message", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (m.verifySignature(hexKey)){
            JOptionPane.showMessageDialog(this, "Sender's public key successfully used to verify signature.", "Message verified", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this, "Sender's public key does not match signature.", "Message not verified", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    public String bigIntegerToLines(BigInteger bigInt){
        String bigString = bigInt.toString();
        String lines = "";
        for (int i=0; i< bigString.length(); i++){
            if (i % 60 == 1){
                lines = lines + "\n";
            }
            lines  = lines + bigString.charAt(i);
        }
        
        return lines;
    }
    
    public void getMessages(boolean verified){
        ArrayList<Message> messageList = new ArrayList<Message>();
        String received;
        if(verified){
            received = sendAndReceive("GETV");
        }
        else{
            received = sendAndReceive("GETA");
        }
        if (received.equals("ERROR")){
            JOptionPane.showMessageDialog(this, "Error receiving messages.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        else if (received.equals("NOMESS")){
            JOptionPane.showMessageDialog(this, "No new messages.", "No Messages", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            String[] parts = received.split("\\.");
            for (String s : parts){
                try {
                    Message message = hexToMessage(s);
                    messageList.add(0, message);
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            messages = messageList;
        }
    }
    
    public void updateMessages(){
        DefaultListModel listModel = new DefaultListModel();
        for (Message message : messages){
            listModel.addElement(message.displayHTMLString());
        }
        if(listModel.getSize() <= 0){
            listModel.removeAllElements();
        }
        jList1.setModel(listModel);
    }
}
